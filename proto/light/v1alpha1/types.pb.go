// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/light/v1alpha1/types.proto

package ethereum_light_v1alpha1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_prysmaticlabs_go_bitfield "github.com/prysmaticlabs/go-bitfield"
	v1alpha1 "github.com/prysmaticlabs/prysm/proto/eth/v1alpha1"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CompactCommittee struct {
	PublicKeys           [][]byte `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" ssz-size:"48,4096"`
	CompactValidators    []uint64 `protobuf:"varint,2,rep,packed,name=compact_validators,json=compactValidators,proto3" json:"compact_validators,omitempty" ssz-size:"4096"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompactCommittee) Reset()         { *m = CompactCommittee{} }
func (m *CompactCommittee) String() string { return proto.CompactTextString(m) }
func (*CompactCommittee) ProtoMessage()    {}
func (*CompactCommittee) Descriptor() ([]byte, []int) {
	return fileDescriptor_394f03aa820f1de8, []int{0}
}
func (m *CompactCommittee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactCommittee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactCommittee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactCommittee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactCommittee.Merge(m, src)
}
func (m *CompactCommittee) XXX_Size() int {
	return m.Size()
}
func (m *CompactCommittee) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactCommittee.DiscardUnknown(m)
}

var xxx_messageInfo_CompactCommittee proto.InternalMessageInfo

func (m *CompactCommittee) GetPublicKeys() [][]byte {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

func (m *CompactCommittee) GetCompactValidators() []uint64 {
	if m != nil {
		return m.CompactValidators
	}
	return nil
}

type LightClientUpdate struct {
	ShardBlockRoot       []byte                                       `protobuf:"bytes,1,opt,name=shard_block_root,json=shardBlockRoot,proto3" json:"shard_block_root,omitempty" ssz-size:"32"`
	ForkVersion          []byte                                       `protobuf:"bytes,2,opt,name=fork_version,json=forkVersion,proto3" json:"fork_version,omitempty" ssz-size:"4"`
	AggregationBits      github_com_prysmaticlabs_go_bitfield.Bitlist `protobuf:"bytes,3,opt,name=aggregation_bits,json=aggregationBits,proto3,casttype=github.com/prysmaticlabs/go-bitfield.Bitlist" json:"aggregation_bits,omitempty" ssz-max:"4096"`
	Signature            []byte                                       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty" ssz-size:"96"`
	Header               *v1alpha1.BeaconBlockHeader                  `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	HeaderBranch         [][]byte                                     `protobuf:"bytes,6,rep,name=header_branch,json=headerBranch,proto3" json:"header_branch,omitempty" ssz-size:"4"`
	Committee            *CompactCommittee                            `protobuf:"bytes,7,opt,name=committee,proto3" json:"committee,omitempty"`
	CommitteeBranch      [][]byte                                     `protobuf:"bytes,8,rep,name=committee_branch,json=committeeBranch,proto3" json:"committee_branch,omitempty" ssz-size:"16"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *LightClientUpdate) Reset()         { *m = LightClientUpdate{} }
func (m *LightClientUpdate) String() string { return proto.CompactTextString(m) }
func (*LightClientUpdate) ProtoMessage()    {}
func (*LightClientUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_394f03aa820f1de8, []int{1}
}
func (m *LightClientUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LightClientUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LightClientUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LightClientUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightClientUpdate.Merge(m, src)
}
func (m *LightClientUpdate) XXX_Size() int {
	return m.Size()
}
func (m *LightClientUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_LightClientUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_LightClientUpdate proto.InternalMessageInfo

func (m *LightClientUpdate) GetShardBlockRoot() []byte {
	if m != nil {
		return m.ShardBlockRoot
	}
	return nil
}

func (m *LightClientUpdate) GetForkVersion() []byte {
	if m != nil {
		return m.ForkVersion
	}
	return nil
}

func (m *LightClientUpdate) GetAggregationBits() github_com_prysmaticlabs_go_bitfield.Bitlist {
	if m != nil {
		return m.AggregationBits
	}
	return nil
}

func (m *LightClientUpdate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *LightClientUpdate) GetHeader() *v1alpha1.BeaconBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LightClientUpdate) GetHeaderBranch() [][]byte {
	if m != nil {
		return m.HeaderBranch
	}
	return nil
}

func (m *LightClientUpdate) GetCommittee() *CompactCommittee {
	if m != nil {
		return m.Committee
	}
	return nil
}

func (m *LightClientUpdate) GetCommitteeBranch() [][]byte {
	if m != nil {
		return m.CommitteeBranch
	}
	return nil
}

type LightClientStore struct {
	Shard                uint64                      `protobuf:"varint,1,opt,name=shard,proto3" json:"shard,omitempty"`
	Header               *v1alpha1.BeaconBlockHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	PreviousCommittee    *CompactCommittee           `protobuf:"bytes,3,opt,name=previous_committee,json=previousCommittee,proto3" json:"previous_committee,omitempty"`
	CurrentCommittee     *CompactCommittee           `protobuf:"bytes,4,opt,name=current_committee,json=currentCommittee,proto3" json:"current_committee,omitempty"`
	NextCommittee        *CompactCommittee           `protobuf:"bytes,5,opt,name=next_committee,json=nextCommittee,proto3" json:"next_committee,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *LightClientStore) Reset()         { *m = LightClientStore{} }
func (m *LightClientStore) String() string { return proto.CompactTextString(m) }
func (*LightClientStore) ProtoMessage()    {}
func (*LightClientStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_394f03aa820f1de8, []int{2}
}
func (m *LightClientStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LightClientStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LightClientStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LightClientStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightClientStore.Merge(m, src)
}
func (m *LightClientStore) XXX_Size() int {
	return m.Size()
}
func (m *LightClientStore) XXX_DiscardUnknown() {
	xxx_messageInfo_LightClientStore.DiscardUnknown(m)
}

var xxx_messageInfo_LightClientStore proto.InternalMessageInfo

func (m *LightClientStore) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *LightClientStore) GetHeader() *v1alpha1.BeaconBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LightClientStore) GetPreviousCommittee() *CompactCommittee {
	if m != nil {
		return m.PreviousCommittee
	}
	return nil
}

func (m *LightClientStore) GetCurrentCommittee() *CompactCommittee {
	if m != nil {
		return m.CurrentCommittee
	}
	return nil
}

func (m *LightClientStore) GetNextCommittee() *CompactCommittee {
	if m != nil {
		return m.NextCommittee
	}
	return nil
}

func init() {
	proto.RegisterType((*CompactCommittee)(nil), "ethereum.light.v1alpha1.CompactCommittee")
	proto.RegisterType((*LightClientUpdate)(nil), "ethereum.light.v1alpha1.LightClientUpdate")
	proto.RegisterType((*LightClientStore)(nil), "ethereum.light.v1alpha1.LightClientStore")
}

func init() { proto.RegisterFile("proto/light/v1alpha1/types.proto", fileDescriptor_394f03aa820f1de8) }

var fileDescriptor_394f03aa820f1de8 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x6e, 0xd3, 0x4e,
	0x14, 0xc5, 0xe5, 0x24, 0xed, 0xff, 0xdf, 0x69, 0xda, 0x3a, 0x03, 0x02, 0xab, 0x8b, 0x26, 0xb2,
	0x84, 0x14, 0xa4, 0xd6, 0xa6, 0x1f, 0x94, 0xcf, 0x05, 0x72, 0x17, 0x20, 0xc1, 0x02, 0x19, 0x51,
	0xb1, 0xb3, 0xc6, 0xce, 0xd4, 0x1e, 0xd5, 0xf6, 0x58, 0x33, 0xd7, 0x51, 0xd3, 0x97, 0xe0, 0x29,
	0x78, 0x17, 0x96, 0x3c, 0x41, 0x84, 0xfa, 0x00, 0x2c, 0xb2, 0x64, 0x85, 0x3c, 0x93, 0xc4, 0x56,
	0x81, 0x45, 0xd8, 0xcd, 0x4d, 0x7e, 0xe7, 0xf8, 0xde, 0x3b, 0xc7, 0x46, 0x83, 0x42, 0x70, 0xe0,
	0x6e, 0xca, 0xe2, 0x04, 0xdc, 0xf1, 0x21, 0x49, 0x8b, 0x84, 0x1c, 0xba, 0x30, 0x29, 0xa8, 0x74,
	0xd4, 0x5f, 0xf8, 0x3e, 0x85, 0x84, 0x0a, 0x5a, 0x66, 0x8e, 0x82, 0x9c, 0x05, 0xb4, 0xfb, 0x40,
	0x4b, 0x29, 0x24, 0xb5, 0x30, 0xa4, 0x24, 0xe2, 0x79, 0x10, 0xa6, 0x3c, 0xba, 0xd4, 0xfa, 0xdd,
	0x83, 0x98, 0x41, 0x52, 0x86, 0x4e, 0xc4, 0x33, 0x37, 0xe6, 0x31, 0x77, 0xd5, 0xcf, 0x61, 0x79,
	0xa1, 0x2a, 0xed, 0x51, 0x9d, 0x34, 0x6e, 0x7f, 0x36, 0x90, 0x79, 0xc6, 0xb3, 0x82, 0x44, 0x70,
	0xc6, 0xb3, 0x8c, 0x01, 0x50, 0x8a, 0x9f, 0xa0, 0xcd, 0xa2, 0x0c, 0x53, 0x16, 0x05, 0x97, 0x74,
	0x22, 0x2d, 0x63, 0xd0, 0x1e, 0x76, 0xbd, 0x7b, 0xb3, 0x69, 0x1f, 0x4b, 0x79, 0x7d, 0x20, 0xd9,
	0x35, 0x7d, 0x6e, 0x9f, 0x3c, 0xdd, 0x3f, 0x79, 0xf4, 0xec, 0xd4, 0xf6, 0x91, 0x46, 0xdf, 0xd2,
	0x89, 0xc4, 0x1e, 0xc2, 0x91, 0x36, 0x0b, 0xc6, 0x24, 0x65, 0x23, 0x02, 0x5c, 0x48, 0xab, 0x35,
	0x68, 0x0f, 0x3b, 0xde, 0x9d, 0xd9, 0xb4, 0xbf, 0xd3, 0xd0, 0x2b, 0x71, 0x6f, 0x8e, 0x9f, 0x2f,
	0x69, 0xfb, 0x4b, 0x07, 0xf5, 0xde, 0x55, 0xa3, 0x9f, 0xa5, 0x8c, 0xe6, 0xf0, 0xb1, 0x18, 0x11,
	0xa0, 0xf8, 0x05, 0x32, 0x65, 0x42, 0xc4, 0x48, 0xcf, 0x1a, 0x08, 0xce, 0xc1, 0x32, 0x06, 0xc6,
	0xb0, 0xeb, 0xf5, 0x66, 0xd3, 0xfe, 0x56, 0xed, 0x7b, 0x7c, 0x64, 0xfb, 0xdb, 0x0a, 0xf5, 0x2a,
	0xd2, 0xe7, 0x1c, 0xf0, 0x31, 0xea, 0x5e, 0x70, 0x71, 0x19, 0x8c, 0xa9, 0x90, 0x8c, 0xe7, 0x56,
	0x4b, 0x09, 0xcd, 0xd9, 0xb4, 0xdf, 0x6d, 0x34, 0x64, 0xfb, 0x9b, 0x15, 0x75, 0xae, 0x21, 0x9c,
	0x21, 0x93, 0xc4, 0xb1, 0xa0, 0x31, 0x01, 0x56, 0xed, 0x98, 0x81, 0xb4, 0xda, 0x4a, 0xe8, 0xcd,
	0xa6, 0xfd, 0xed, 0x4a, 0x98, 0x91, 0xab, 0xf9, 0x20, 0x3f, 0xa7, 0xfd, 0xfd, 0xc6, 0xe2, 0x0b,
	0x31, 0x91, 0x19, 0x01, 0x16, 0xa5, 0x24, 0x94, 0x6e, 0xcc, 0x0f, 0x42, 0x06, 0x17, 0x8c, 0xa6,
	0x23, 0xc7, 0x63, 0x90, 0x32, 0x09, 0xfe, 0x4e, 0xc3, 0xdb, 0x63, 0x20, 0xb1, 0x8b, 0x36, 0x24,
	0x8b, 0x73, 0x02, 0xa5, 0xa0, 0x56, 0xe7, 0x4f, 0x93, 0x55, 0xfb, 0xaa, 0x19, 0xfc, 0x0a, 0xad,
	0x27, 0x94, 0x8c, 0xa8, 0xb0, 0xd6, 0x06, 0xc6, 0x70, 0xf3, 0x68, 0xe8, 0x2c, 0x93, 0x43, 0x21,
	0x59, 0xe6, 0xc6, 0xf1, 0x54, 0x46, 0xd4, 0x32, 0xde, 0x28, 0xde, 0x9f, 0xeb, 0xf0, 0x63, 0xb4,
	0xa5, 0x4f, 0x41, 0x28, 0x48, 0x1e, 0x25, 0xd6, 0xba, 0xba, 0xe8, 0xdf, 0xf7, 0xd2, 0xd5, 0x98,
	0xa7, 0x28, 0xfc, 0x1a, 0x6d, 0x44, 0x8b, 0xa8, 0x58, 0xff, 0xa9, 0x67, 0x3f, 0x74, 0xfe, 0x92,
	0x5a, 0xe7, 0x76, 0xb6, 0xfc, 0x5a, 0x8b, 0x5f, 0x22, 0x73, 0x59, 0x2c, 0x5a, 0xf8, 0x5f, 0xb5,
	0x70, 0x6b, 0xf2, 0xc3, 0x53, 0xdb, 0xdf, 0x59, 0xa2, 0xba, 0x0d, 0xfb, 0x47, 0x0b, 0x99, 0x8d,
	0x9c, 0x7c, 0x00, 0x2e, 0x28, 0xbe, 0x8b, 0xd6, 0xd4, 0xdd, 0xab, 0x6c, 0x74, 0x7c, 0x5d, 0x34,
	0x56, 0xd5, 0xfa, 0xc7, 0x55, 0x7d, 0x42, 0xb8, 0x10, 0x74, 0xcc, 0x78, 0x29, 0x83, 0x7a, 0xf8,
	0xf6, 0xaa, 0xc3, 0xf7, 0x16, 0x26, 0xf5, 0xbb, 0x76, 0x8e, 0x7a, 0x51, 0x29, 0x04, 0xcd, 0xa1,
	0x61, 0xdc, 0x59, 0xd5, 0xd8, 0x9c, 0x7b, 0xd4, 0xbe, 0xef, 0xd1, 0x76, 0x4e, 0xaf, 0x9a, 0xa6,
	0x6b, 0xab, 0x9a, 0x6e, 0x55, 0x06, 0xcb, 0xd2, 0xeb, 0x7e, 0xbd, 0xd9, 0x33, 0xbe, 0xdd, 0xec,
	0x19, 0xdf, 0x6f, 0xf6, 0x8c, 0x70, 0x5d, 0x7d, 0x3f, 0x8e, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x4b, 0x58, 0x59, 0x06, 0xd2, 0x04, 0x00, 0x00,
}

func (m *CompactCommittee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactCommittee) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKeys) > 0 {
		for _, b := range m.PublicKeys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.CompactValidators) > 0 {
		dAtA2 := make([]byte, len(m.CompactValidators)*10)
		var j1 int
		for _, num := range m.CompactValidators {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LightClientUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LightClientUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ShardBlockRoot) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ShardBlockRoot)))
		i += copy(dAtA[i:], m.ShardBlockRoot)
	}
	if len(m.ForkVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ForkVersion)))
		i += copy(dAtA[i:], m.ForkVersion)
	}
	if len(m.AggregationBits) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AggregationBits)))
		i += copy(dAtA[i:], m.AggregationBits)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.Header != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Header.Size()))
		n3, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.HeaderBranch) > 0 {
		for _, b := range m.HeaderBranch {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Committee != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Committee.Size()))
		n4, err := m.Committee.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.CommitteeBranch) > 0 {
		for _, b := range m.CommitteeBranch {
			dAtA[i] = 0x42
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LightClientStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LightClientStore) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shard != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Shard))
	}
	if m.Header != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Header.Size()))
		n5, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.PreviousCommittee != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PreviousCommittee.Size()))
		n6, err := m.PreviousCommittee.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.CurrentCommittee != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentCommittee.Size()))
		n7, err := m.CurrentCommittee.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.NextCommittee != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.NextCommittee.Size()))
		n8, err := m.NextCommittee.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CompactCommittee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublicKeys) > 0 {
		for _, b := range m.PublicKeys {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.CompactValidators) > 0 {
		l = 0
		for _, e := range m.CompactValidators {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LightClientUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShardBlockRoot)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ForkVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AggregationBits)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.HeaderBranch) > 0 {
		for _, b := range m.HeaderBranch {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Committee != nil {
		l = m.Committee.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CommitteeBranch) > 0 {
		for _, b := range m.CommitteeBranch {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LightClientStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shard != 0 {
		n += 1 + sovTypes(uint64(m.Shard))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PreviousCommittee != nil {
		l = m.PreviousCommittee.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CurrentCommittee != nil {
		l = m.CurrentCommittee.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NextCommittee != nil {
		l = m.NextCommittee.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CompactCommittee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactCommittee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactCommittee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKeys = append(m.PublicKeys, make([]byte, postIndex-iNdEx))
			copy(m.PublicKeys[len(m.PublicKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompactValidators = append(m.CompactValidators, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompactValidators) == 0 {
					m.CompactValidators = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompactValidators = append(m.CompactValidators, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactValidators", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LightClientUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LightClientUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LightClientUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardBlockRoot = append(m.ShardBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardBlockRoot == nil {
				m.ShardBlockRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForkVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForkVersion = append(m.ForkVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.ForkVersion == nil {
				m.ForkVersion = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationBits = append(m.AggregationBits[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregationBits == nil {
				m.AggregationBits = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1alpha1.BeaconBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderBranch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderBranch = append(m.HeaderBranch, make([]byte, postIndex-iNdEx))
			copy(m.HeaderBranch[len(m.HeaderBranch)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Committee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Committee == nil {
				m.Committee = &CompactCommittee{}
			}
			if err := m.Committee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitteeBranch", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitteeBranch = append(m.CommitteeBranch, make([]byte, postIndex-iNdEx))
			copy(m.CommitteeBranch[len(m.CommitteeBranch)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LightClientStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LightClientStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LightClientStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v1alpha1.BeaconBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousCommittee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousCommittee == nil {
				m.PreviousCommittee = &CompactCommittee{}
			}
			if err := m.PreviousCommittee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCommittee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentCommittee == nil {
				m.CurrentCommittee = &CompactCommittee{}
			}
			if err := m.CurrentCommittee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCommittee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextCommittee == nil {
				m.NextCommittee = &CompactCommittee{}
			}
			if err := m.NextCommittee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)
