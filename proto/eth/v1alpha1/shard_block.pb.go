// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/eth/v1alpha1/shard_block.proto

package eth

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_prysmaticlabs_go_bitfield "github.com/prysmaticlabs/go-bitfield"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ShardBlockSignatures struct {
	Attesters            []byte   `protobuf:"bytes,1,opt,name=attesters,proto3" json:"attesters,omitempty" ssz-size:"96"`
	Proposers            []byte   `protobuf:"bytes,2,opt,name=proposers,proto3" json:"proposers,omitempty" ssz-size:"96"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardBlockSignatures) Reset()         { *m = ShardBlockSignatures{} }
func (m *ShardBlockSignatures) String() string { return proto.CompactTextString(m) }
func (*ShardBlockSignatures) ProtoMessage()    {}
func (*ShardBlockSignatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_532bd7eaa7900ba9, []int{0}
}
func (m *ShardBlockSignatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardBlockSignatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardBlockSignatures.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardBlockSignatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardBlockSignatures.Merge(m, src)
}
func (m *ShardBlockSignatures) XXX_Size() int {
	return m.Size()
}
func (m *ShardBlockSignatures) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardBlockSignatures.DiscardUnknown(m)
}

var xxx_messageInfo_ShardBlockSignatures proto.InternalMessageInfo

func (m *ShardBlockSignatures) GetAttesters() []byte {
	if m != nil {
		return m.Attesters
	}
	return nil
}

func (m *ShardBlockSignatures) GetProposers() []byte {
	if m != nil {
		return m.Proposers
	}
	return nil
}

type ShardBlockData struct {
	Slot                 uint64                                       `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	BeaconBlockRoot      []byte                                       `protobuf:"bytes,2,opt,name=beacon_block_root,json=beaconBlockRoot,proto3" json:"beacon_block_root,omitempty" ssz-size:"32"`
	ParentRoot           []byte                                       `protobuf:"bytes,3,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty" ssz-size:"32"`
	StateRoot            []byte                                       `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty" ssz-size:"32"`
	AggregationBits      github_com_prysmaticlabs_go_bitfield.Bitlist `protobuf:"bytes,5,opt,name=aggregation_bits,json=aggregationBits,proto3,casttype=github.com/prysmaticlabs/go-bitfield.Bitlist" json:"aggregation_bits,omitempty" ssz-max:"256"`
	BlockSizeSum         uint64                                       `protobuf:"varint,6,opt,name=block_size_sum,json=blockSizeSum,proto3" json:"block_size_sum,omitempty"`
	Body                 [][]byte                                     `protobuf:"bytes,7,rep,name=body,proto3" json:"body,omitempty" ssz-max:"65024"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *ShardBlockData) Reset()         { *m = ShardBlockData{} }
func (m *ShardBlockData) String() string { return proto.CompactTextString(m) }
func (*ShardBlockData) ProtoMessage()    {}
func (*ShardBlockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_532bd7eaa7900ba9, []int{1}
}
func (m *ShardBlockData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardBlockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardBlockData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardBlockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardBlockData.Merge(m, src)
}
func (m *ShardBlockData) XXX_Size() int {
	return m.Size()
}
func (m *ShardBlockData) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardBlockData.DiscardUnknown(m)
}

var xxx_messageInfo_ShardBlockData proto.InternalMessageInfo

func (m *ShardBlockData) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardBlockData) GetBeaconBlockRoot() []byte {
	if m != nil {
		return m.BeaconBlockRoot
	}
	return nil
}

func (m *ShardBlockData) GetParentRoot() []byte {
	if m != nil {
		return m.ParentRoot
	}
	return nil
}

func (m *ShardBlockData) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *ShardBlockData) GetAggregationBits() github_com_prysmaticlabs_go_bitfield.Bitlist {
	if m != nil {
		return m.AggregationBits
	}
	return nil
}

func (m *ShardBlockData) GetBlockSizeSum() uint64 {
	if m != nil {
		return m.BlockSizeSum
	}
	return 0
}

func (m *ShardBlockData) GetBody() [][]byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type ShardBlock struct {
	Data                 *ShardBlockData       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Signatures           *ShardBlockSignatures `protobuf:"bytes,2,opt,name=signatures,proto3" json:"signatures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ShardBlock) Reset()         { *m = ShardBlock{} }
func (m *ShardBlock) String() string { return proto.CompactTextString(m) }
func (*ShardBlock) ProtoMessage()    {}
func (*ShardBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_532bd7eaa7900ba9, []int{2}
}
func (m *ShardBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardBlock.Merge(m, src)
}
func (m *ShardBlock) XXX_Size() int {
	return m.Size()
}
func (m *ShardBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ShardBlock proto.InternalMessageInfo

func (m *ShardBlock) GetData() *ShardBlockData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ShardBlock) GetSignatures() *ShardBlockSignatures {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type ShardBlockHeaderData struct {
	Slot                 uint64                                       `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	BeaconBlockRoot      []byte                                       `protobuf:"bytes,2,opt,name=beacon_block_root,json=beaconBlockRoot,proto3" json:"beacon_block_root,omitempty" ssz-size:"32"`
	ParentRoot           []byte                                       `protobuf:"bytes,3,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty" ssz-size:"32"`
	StateRoot            []byte                                       `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty" ssz-size:"32"`
	AggregationBits      github_com_prysmaticlabs_go_bitfield.Bitlist `protobuf:"bytes,5,opt,name=aggregation_bits,json=aggregationBits,proto3,casttype=github.com/prysmaticlabs/go-bitfield.Bitlist" json:"aggregation_bits,omitempty" ssz-max:"256"`
	BlockSizeSum         uint64                                       `protobuf:"varint,6,opt,name=block_size_sum,json=blockSizeSum,proto3" json:"block_size_sum,omitempty"`
	BodyRoot             []byte                                       `protobuf:"bytes,7,opt,name=body_root,json=bodyRoot,proto3" json:"body_root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *ShardBlockHeaderData) Reset()         { *m = ShardBlockHeaderData{} }
func (m *ShardBlockHeaderData) String() string { return proto.CompactTextString(m) }
func (*ShardBlockHeaderData) ProtoMessage()    {}
func (*ShardBlockHeaderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_532bd7eaa7900ba9, []int{3}
}
func (m *ShardBlockHeaderData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardBlockHeaderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardBlockHeaderData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardBlockHeaderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardBlockHeaderData.Merge(m, src)
}
func (m *ShardBlockHeaderData) XXX_Size() int {
	return m.Size()
}
func (m *ShardBlockHeaderData) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardBlockHeaderData.DiscardUnknown(m)
}

var xxx_messageInfo_ShardBlockHeaderData proto.InternalMessageInfo

func (m *ShardBlockHeaderData) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardBlockHeaderData) GetBeaconBlockRoot() []byte {
	if m != nil {
		return m.BeaconBlockRoot
	}
	return nil
}

func (m *ShardBlockHeaderData) GetParentRoot() []byte {
	if m != nil {
		return m.ParentRoot
	}
	return nil
}

func (m *ShardBlockHeaderData) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *ShardBlockHeaderData) GetAggregationBits() github_com_prysmaticlabs_go_bitfield.Bitlist {
	if m != nil {
		return m.AggregationBits
	}
	return nil
}

func (m *ShardBlockHeaderData) GetBlockSizeSum() uint64 {
	if m != nil {
		return m.BlockSizeSum
	}
	return 0
}

func (m *ShardBlockHeaderData) GetBodyRoot() []byte {
	if m != nil {
		return m.BodyRoot
	}
	return nil
}

type ShardBlockHeader struct {
	Data                 *ShardBlockHeaderData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Signatures           *ShardBlockSignatures `protobuf:"bytes,2,opt,name=signatures,proto3" json:"signatures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ShardBlockHeader) Reset()         { *m = ShardBlockHeader{} }
func (m *ShardBlockHeader) String() string { return proto.CompactTextString(m) }
func (*ShardBlockHeader) ProtoMessage()    {}
func (*ShardBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_532bd7eaa7900ba9, []int{4}
}
func (m *ShardBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardBlockHeader.Merge(m, src)
}
func (m *ShardBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *ShardBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ShardBlockHeader proto.InternalMessageInfo

func (m *ShardBlockHeader) GetData() *ShardBlockHeaderData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ShardBlockHeader) GetSignatures() *ShardBlockSignatures {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type ShardState struct {
	Shard                 uint64                `protobuf:"varint,1,opt,name=shard,proto3" json:"shard,omitempty"`
	Slot                  uint64                `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	HistoryAccumulator    [][]byte              `protobuf:"bytes,3,rep,name=history_accumulator,json=historyAccumulator,proto3" json:"history_accumulator,omitempty" ssz-size:"32,64"`
	LatestBlockHeaderData *ShardBlockHeaderData `protobuf:"bytes,4,opt,name=latest_block_header_data,json=latestBlockHeaderData,proto3" json:"latest_block_header_data,omitempty"`
	BlockSizeSum          uint64                `protobuf:"varint,5,opt,name=block_size_sum,json=blockSizeSum,proto3" json:"block_size_sum,omitempty"`
	BlockSizePrice        uint64                `protobuf:"varint,6,opt,name=block_size_price,json=blockSizePrice,proto3" json:"block_size_price,omitempty"`
	OlderCommitteeFees    []uint64              `protobuf:"varint,7,rep,packed,name=older_committee_fees,json=olderCommitteeFees,proto3" json:"older_committee_fees,omitempty" ssz-max:"128"`
	NewerCommitteeFees    []uint64              `protobuf:"varint,8,rep,packed,name=newer_committee_fees,json=newerCommitteeFees,proto3" json:"newer_committee_fees,omitempty" ssz-max:"128"`
	OlderCommitteeRewards []uint64              `protobuf:"varint,9,rep,packed,name=older_committee_rewards,json=olderCommitteeRewards,proto3" json:"older_committee_rewards,omitempty" ssz-max:"128"`
	NewerCommitteeRewards []uint64              `protobuf:"varint,10,rep,packed,name=newer_committee_rewards,json=newerCommitteeRewards,proto3" json:"newer_committee_rewards,omitempty" ssz-max:"128"`
	XXX_NoUnkeyedLiteral  struct{}              `json:"-"`
	XXX_unrecognized      []byte                `json:"-"`
	XXX_sizecache         int32                 `json:"-"`
}

func (m *ShardState) Reset()         { *m = ShardState{} }
func (m *ShardState) String() string { return proto.CompactTextString(m) }
func (*ShardState) ProtoMessage()    {}
func (*ShardState) Descriptor() ([]byte, []int) {
	return fileDescriptor_532bd7eaa7900ba9, []int{5}
}
func (m *ShardState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardState.Merge(m, src)
}
func (m *ShardState) XXX_Size() int {
	return m.Size()
}
func (m *ShardState) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardState.DiscardUnknown(m)
}

var xxx_messageInfo_ShardState proto.InternalMessageInfo

func (m *ShardState) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ShardState) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardState) GetHistoryAccumulator() [][]byte {
	if m != nil {
		return m.HistoryAccumulator
	}
	return nil
}

func (m *ShardState) GetLatestBlockHeaderData() *ShardBlockHeaderData {
	if m != nil {
		return m.LatestBlockHeaderData
	}
	return nil
}

func (m *ShardState) GetBlockSizeSum() uint64 {
	if m != nil {
		return m.BlockSizeSum
	}
	return 0
}

func (m *ShardState) GetBlockSizePrice() uint64 {
	if m != nil {
		return m.BlockSizePrice
	}
	return 0
}

func (m *ShardState) GetOlderCommitteeFees() []uint64 {
	if m != nil {
		return m.OlderCommitteeFees
	}
	return nil
}

func (m *ShardState) GetNewerCommitteeFees() []uint64 {
	if m != nil {
		return m.NewerCommitteeFees
	}
	return nil
}

func (m *ShardState) GetOlderCommitteeRewards() []uint64 {
	if m != nil {
		return m.OlderCommitteeRewards
	}
	return nil
}

func (m *ShardState) GetNewerCommitteeRewards() []uint64 {
	if m != nil {
		return m.NewerCommitteeRewards
	}
	return nil
}

type ShardCheckpoint struct {
	Slot                 uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentRoot           []byte   `protobuf:"bytes,2,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty" ssz-size:"32"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardCheckpoint) Reset()         { *m = ShardCheckpoint{} }
func (m *ShardCheckpoint) String() string { return proto.CompactTextString(m) }
func (*ShardCheckpoint) ProtoMessage()    {}
func (*ShardCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_532bd7eaa7900ba9, []int{6}
}
func (m *ShardCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardCheckpoint.Merge(m, src)
}
func (m *ShardCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *ShardCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_ShardCheckpoint proto.InternalMessageInfo

func (m *ShardCheckpoint) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ShardCheckpoint) GetParentRoot() []byte {
	if m != nil {
		return m.ParentRoot
	}
	return nil
}

func init() {
	proto.RegisterType((*ShardBlockSignatures)(nil), "ethereum.eth.v1alpha1.ShardBlockSignatures")
	proto.RegisterType((*ShardBlockData)(nil), "ethereum.eth.v1alpha1.ShardBlockData")
	proto.RegisterType((*ShardBlock)(nil), "ethereum.eth.v1alpha1.ShardBlock")
	proto.RegisterType((*ShardBlockHeaderData)(nil), "ethereum.eth.v1alpha1.ShardBlockHeaderData")
	proto.RegisterType((*ShardBlockHeader)(nil), "ethereum.eth.v1alpha1.ShardBlockHeader")
	proto.RegisterType((*ShardState)(nil), "ethereum.eth.v1alpha1.ShardState")
	proto.RegisterType((*ShardCheckpoint)(nil), "ethereum.eth.v1alpha1.ShardCheckpoint")
}

func init() {
	proto.RegisterFile("proto/eth/v1alpha1/shard_block.proto", fileDescriptor_532bd7eaa7900ba9)
}

var fileDescriptor_532bd7eaa7900ba9 = []byte{
	// 744 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcb, 0x6e, 0xdb, 0x38,
	0x14, 0x85, 0x63, 0xe5, 0x61, 0x26, 0x13, 0x3b, 0x8c, 0x83, 0x31, 0x66, 0x11, 0x07, 0x42, 0x06,
	0x13, 0x60, 0x12, 0x29, 0x71, 0x12, 0x63, 0x92, 0xc1, 0x60, 0x10, 0xbb, 0x2d, 0x5a, 0x74, 0x53,
	0xc8, 0xab, 0x76, 0x63, 0x50, 0x32, 0x23, 0x11, 0x91, 0x4c, 0x81, 0xbc, 0x6a, 0x1e, 0x1f, 0xd0,
	0x1f, 0x68, 0x3f, 0xa0, 0x9f, 0xd3, 0x65, 0x81, 0xee, 0x8d, 0x22, 0x9f, 0x90, 0x65, 0x57, 0x05,
	0x29, 0xbf, 0x63, 0x21, 0x2d, 0xd0, 0xee, 0xba, 0x13, 0xe5, 0x73, 0x8e, 0xee, 0xbd, 0xe7, 0xf0,
	0xc2, 0x68, 0x3b, 0x16, 0x1c, 0xb8, 0x4d, 0x21, 0xb0, 0x5f, 0x1f, 0x90, 0x30, 0x0e, 0xc8, 0x81,
	0x2d, 0x03, 0x22, 0x3a, 0x6d, 0x37, 0xe4, 0xde, 0x85, 0xa5, 0x7f, 0xc6, 0x1b, 0x14, 0x02, 0x2a,
	0x68, 0x12, 0x59, 0x14, 0x02, 0x6b, 0x00, 0xfc, 0x63, 0xcf, 0x67, 0x10, 0x24, 0xae, 0xe5, 0xf1,
	0xc8, 0xf6, 0xb9, 0xcf, 0x6d, 0x8d, 0x76, 0x93, 0x73, 0x7d, 0x4a, 0x95, 0xd5, 0x53, 0xaa, 0x62,
	0x5e, 0xa1, 0x72, 0x4b, 0x49, 0x37, 0x94, 0x72, 0x8b, 0xf9, 0x5d, 0x02, 0x89, 0xa0, 0x12, 0xdb,
	0xa8, 0x40, 0x00, 0xa8, 0x04, 0x2a, 0x64, 0x25, 0xb7, 0x95, 0xdb, 0x59, 0x69, 0xac, 0xdd, 0xf5,
	0xaa, 0xbf, 0x49, 0x79, 0xb3, 0x27, 0xd9, 0x0d, 0x3d, 0x35, 0x4f, 0xea, 0xa6, 0x33, 0xc2, 0x28,
	0x42, 0x2c, 0x78, 0xcc, 0xa5, 0x22, 0xcc, 0x65, 0x12, 0x86, 0x18, 0xf3, 0x4d, 0x1e, 0xad, 0x8e,
	0x3e, 0xfd, 0x88, 0x00, 0xc1, 0x18, 0x19, 0x32, 0xe4, 0xa0, 0xbf, 0x67, 0x38, 0xfa, 0x19, 0xff,
	0x87, 0xd6, 0x5c, 0x4a, 0x3c, 0xde, 0x4d, 0x9b, 0x6f, 0x0b, 0xce, 0x61, 0xb6, 0xfe, 0x61, 0xcd,
	0x74, 0x8a, 0x29, 0x56, 0x4b, 0x3a, 0x9c, 0x03, 0xae, 0xa1, 0xe5, 0x98, 0x08, 0xda, 0x85, 0x94,
	0x98, 0xcf, 0x22, 0xa2, 0x14, 0xa5, 0x39, 0xfb, 0x08, 0x49, 0x20, 0x40, 0x53, 0x8a, 0x91, 0x45,
	0x29, 0x68, 0x90, 0x66, 0x84, 0xa8, 0x44, 0x7c, 0x5f, 0x50, 0x9f, 0x00, 0x53, 0x95, 0x32, 0x90,
	0x95, 0x79, 0xcd, 0x3b, 0x1b, 0xf0, 0x22, 0x72, 0x75, 0x6a, 0xd6, 0x8e, 0xeb, 0xe6, 0x97, 0x5e,
	0x75, 0x77, 0xcc, 0xa3, 0x58, 0x5c, 0xcb, 0x88, 0x00, 0xf3, 0x42, 0xe2, 0x4a, 0xdb, 0xe7, 0x7b,
	0x2e, 0x83, 0x73, 0x46, 0xc3, 0x8e, 0xd5, 0x60, 0x10, 0x32, 0x09, 0x4e, 0x71, 0x4c, 0xba, 0xc1,
	0x40, 0xe2, 0x6d, 0xb4, 0x9a, 0xce, 0x42, 0xd5, 0xd2, 0x96, 0x49, 0x54, 0x59, 0xd0, 0x03, 0x5b,
	0x71, 0x53, 0x13, 0x6f, 0x68, 0x2b, 0x89, 0xf0, 0x5f, 0xc8, 0x70, 0x79, 0xe7, 0xba, 0xb2, 0xb8,
	0x95, 0xdf, 0x59, 0x69, 0xac, 0xdf, 0xf5, 0xaa, 0xc5, 0x61, 0x1d, 0xf5, 0xe3, 0xfd, 0xda, 0x91,
	0xe9, 0x68, 0x80, 0xf9, 0x2e, 0x87, 0xd0, 0xc8, 0x08, 0x7c, 0x82, 0x8c, 0x0e, 0x01, 0xa2, 0x4d,
	0x58, 0xae, 0xfd, 0x69, 0xcd, 0x8c, 0x99, 0x35, 0xe9, 0x9c, 0xa3, 0x29, 0xf8, 0x39, 0x42, 0x72,
	0x18, 0x21, 0x6d, 0xd2, 0x72, 0xed, 0xef, 0x07, 0x05, 0x46, 0xa9, 0x73, 0xc6, 0xe8, 0xe6, 0xdb,
	0xfc, 0x78, 0x34, 0x9f, 0x52, 0xd2, 0xa1, 0xe2, 0x57, 0x4a, 0x7e, 0x74, 0x4a, 0x2c, 0x54, 0x50,
	0x21, 0x48, 0x9b, 0x58, 0xcc, 0x6a, 0x62, 0x49, 0x61, 0x54, 0x0f, 0xe6, 0xfb, 0x1c, 0x2a, 0x4d,
	0xbb, 0x82, 0xff, 0x9f, 0x88, 0xcc, 0xc3, 0x8e, 0x8f, 0xcc, 0xfc, 0x19, 0xc1, 0xf9, 0x64, 0xf4,
	0xf3, 0xdc, 0x52, 0x93, 0xc7, 0x65, 0x34, 0xaf, 0x97, 0x67, 0x3f, 0x2f, 0xe9, 0x61, 0x18, 0xa2,
	0xb9, 0xb1, 0x10, 0x3d, 0x46, 0xeb, 0x01, 0x93, 0xc0, 0xc5, 0x75, 0x9b, 0x78, 0x5e, 0x12, 0x25,
	0x21, 0x01, 0x2e, 0x2a, 0x79, 0x7d, 0x81, 0xca, 0x77, 0xbd, 0x6a, 0x69, 0x7c, 0x2a, 0xbb, 0xf5,
	0x23, 0xd3, 0xc1, 0x7d, 0xc2, 0xd9, 0x08, 0x8f, 0x3b, 0xa8, 0x12, 0x12, 0xb5, 0x16, 0xfb, 0x59,
	0x0c, 0x74, 0xb7, 0x6d, 0x3d, 0x21, 0xe3, 0xfb, 0x27, 0xb4, 0x91, 0x8a, 0x4d, 0xdf, 0x82, 0xfb,
	0xf6, 0xce, 0xcf, 0xb0, 0x77, 0x07, 0x95, 0xc6, 0x50, 0xb1, 0x60, 0x1e, 0xed, 0xc7, 0x60, 0x75,
	0x88, 0x7b, 0xa1, 0xde, 0xe2, 0x26, 0x2a, 0xf3, 0x50, 0xd5, 0xe9, 0xf1, 0x28, 0x62, 0x00, 0x94,
	0xb6, 0xcf, 0x29, 0x95, 0x7a, 0x7d, 0x18, 0xa3, 0x4c, 0xe8, 0x80, 0x1e, 0xd4, 0xfe, 0x31, 0x1d,
	0xac, 0xe1, 0xcd, 0x01, 0xfa, 0x09, 0xa5, 0x52, 0x89, 0x74, 0xe9, 0xe5, 0x7d, 0x91, 0xa5, 0x4c,
	0x11, 0x0d, 0x9f, 0x14, 0x79, 0x86, 0x7e, 0x9f, 0xae, 0x44, 0xd0, 0x4b, 0x22, 0x3a, 0xb2, 0x52,
	0xc8, 0xd2, 0xd9, 0x98, 0x2c, 0xc6, 0x49, 0xf1, 0x4a, 0x6a, 0xba, 0x9e, 0x81, 0x14, 0xca, 0x94,
	0x9a, 0x2c, 0xa9, 0x2f, 0x65, 0xbe, 0x44, 0x45, 0x6d, 0x4f, 0x33, 0xa0, 0xde, 0x45, 0xcc, 0x59,
	0x17, 0x66, 0x2e, 0xa2, 0xa9, 0x4d, 0x32, 0xf7, 0x0d, 0x9b, 0xa4, 0xd1, 0xfc, 0x70, 0xbb, 0x99,
	0xfb, 0x78, 0xbb, 0x99, 0xfb, 0x7c, 0xbb, 0x99, 0x7b, 0x75, 0x9c, 0x79, 0xed, 0xf5, 0xc9, 0xbe,
	0xff, 0xe7, 0xe0, 0x5f, 0x0a, 0x81, 0xbb, 0xa0, 0xdf, 0x1f, 0x7e, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xe4, 0xcc, 0x21, 0xb6, 0x3d, 0x08, 0x00, 0x00,
}

func (m *ShardBlockSignatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardBlockSignatures) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Attesters) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.Attesters)))
		i += copy(dAtA[i:], m.Attesters)
	}
	if len(m.Proposers) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.Proposers)))
		i += copy(dAtA[i:], m.Proposers)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardBlockData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardBlockData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.Slot))
	}
	if len(m.BeaconBlockRoot) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.BeaconBlockRoot)))
		i += copy(dAtA[i:], m.BeaconBlockRoot)
	}
	if len(m.ParentRoot) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.ParentRoot)))
		i += copy(dAtA[i:], m.ParentRoot)
	}
	if len(m.StateRoot) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.StateRoot)))
		i += copy(dAtA[i:], m.StateRoot)
	}
	if len(m.AggregationBits) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.AggregationBits)))
		i += copy(dAtA[i:], m.AggregationBits)
	}
	if m.BlockSizeSum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.BlockSizeSum))
	}
	if len(m.Body) > 0 {
		for _, b := range m.Body {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintShardBlock(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Signatures != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.Signatures.Size()))
		n2, err := m.Signatures.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardBlockHeaderData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardBlockHeaderData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.Slot))
	}
	if len(m.BeaconBlockRoot) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.BeaconBlockRoot)))
		i += copy(dAtA[i:], m.BeaconBlockRoot)
	}
	if len(m.ParentRoot) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.ParentRoot)))
		i += copy(dAtA[i:], m.ParentRoot)
	}
	if len(m.StateRoot) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.StateRoot)))
		i += copy(dAtA[i:], m.StateRoot)
	}
	if len(m.AggregationBits) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.AggregationBits)))
		i += copy(dAtA[i:], m.AggregationBits)
	}
	if m.BlockSizeSum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.BlockSizeSum))
	}
	if len(m.BodyRoot) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.BodyRoot)))
		i += copy(dAtA[i:], m.BodyRoot)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Signatures != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.Signatures.Size()))
		n4, err := m.Signatures.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shard != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.Shard))
	}
	if m.Slot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.Slot))
	}
	if len(m.HistoryAccumulator) > 0 {
		for _, b := range m.HistoryAccumulator {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintShardBlock(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.LatestBlockHeaderData != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.LatestBlockHeaderData.Size()))
		n5, err := m.LatestBlockHeaderData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.BlockSizeSum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.BlockSizeSum))
	}
	if m.BlockSizePrice != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.BlockSizePrice))
	}
	if len(m.OlderCommitteeFees) > 0 {
		dAtA7 := make([]byte, len(m.OlderCommitteeFees)*10)
		var j6 int
		for _, num := range m.OlderCommitteeFees {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.NewerCommitteeFees) > 0 {
		dAtA9 := make([]byte, len(m.NewerCommitteeFees)*10)
		var j8 int
		for _, num := range m.NewerCommitteeFees {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if len(m.OlderCommitteeRewards) > 0 {
		dAtA11 := make([]byte, len(m.OlderCommitteeRewards)*10)
		var j10 int
		for _, num := range m.OlderCommitteeRewards {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x4a
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	if len(m.NewerCommitteeRewards) > 0 {
		dAtA13 := make([]byte, len(m.NewerCommitteeRewards)*10)
		var j12 int
		for _, num := range m.NewerCommitteeRewards {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(m.Slot))
	}
	if len(m.ParentRoot) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShardBlock(dAtA, i, uint64(len(m.ParentRoot)))
		i += copy(dAtA[i:], m.ParentRoot)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintShardBlock(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShardBlockSignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Attesters)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	l = len(m.Proposers)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardBlockData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovShardBlock(uint64(m.Slot))
	}
	l = len(m.BeaconBlockRoot)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	l = len(m.ParentRoot)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	l = len(m.AggregationBits)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	if m.BlockSizeSum != 0 {
		n += 1 + sovShardBlock(uint64(m.BlockSizeSum))
	}
	if len(m.Body) > 0 {
		for _, b := range m.Body {
			l = len(b)
			n += 1 + l + sovShardBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovShardBlock(uint64(l))
	}
	if m.Signatures != nil {
		l = m.Signatures.Size()
		n += 1 + l + sovShardBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardBlockHeaderData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovShardBlock(uint64(m.Slot))
	}
	l = len(m.BeaconBlockRoot)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	l = len(m.ParentRoot)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	l = len(m.AggregationBits)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	if m.BlockSizeSum != 0 {
		n += 1 + sovShardBlock(uint64(m.BlockSizeSum))
	}
	l = len(m.BodyRoot)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovShardBlock(uint64(l))
	}
	if m.Signatures != nil {
		l = m.Signatures.Size()
		n += 1 + l + sovShardBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Shard != 0 {
		n += 1 + sovShardBlock(uint64(m.Shard))
	}
	if m.Slot != 0 {
		n += 1 + sovShardBlock(uint64(m.Slot))
	}
	if len(m.HistoryAccumulator) > 0 {
		for _, b := range m.HistoryAccumulator {
			l = len(b)
			n += 1 + l + sovShardBlock(uint64(l))
		}
	}
	if m.LatestBlockHeaderData != nil {
		l = m.LatestBlockHeaderData.Size()
		n += 1 + l + sovShardBlock(uint64(l))
	}
	if m.BlockSizeSum != 0 {
		n += 1 + sovShardBlock(uint64(m.BlockSizeSum))
	}
	if m.BlockSizePrice != 0 {
		n += 1 + sovShardBlock(uint64(m.BlockSizePrice))
	}
	if len(m.OlderCommitteeFees) > 0 {
		l = 0
		for _, e := range m.OlderCommitteeFees {
			l += sovShardBlock(uint64(e))
		}
		n += 1 + sovShardBlock(uint64(l)) + l
	}
	if len(m.NewerCommitteeFees) > 0 {
		l = 0
		for _, e := range m.NewerCommitteeFees {
			l += sovShardBlock(uint64(e))
		}
		n += 1 + sovShardBlock(uint64(l)) + l
	}
	if len(m.OlderCommitteeRewards) > 0 {
		l = 0
		for _, e := range m.OlderCommitteeRewards {
			l += sovShardBlock(uint64(e))
		}
		n += 1 + sovShardBlock(uint64(l)) + l
	}
	if len(m.NewerCommitteeRewards) > 0 {
		l = 0
		for _, e := range m.NewerCommitteeRewards {
			l += sovShardBlock(uint64(e))
		}
		n += 1 + sovShardBlock(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovShardBlock(uint64(m.Slot))
	}
	l = len(m.ParentRoot)
	if l > 0 {
		n += 1 + l + sovShardBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovShardBlock(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShardBlock(x uint64) (n int) {
	return sovShardBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShardBlockSignatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardBlockSignatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardBlockSignatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attesters", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attesters = append(m.Attesters[:0], dAtA[iNdEx:postIndex]...)
			if m.Attesters == nil {
				m.Attesters = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposers = append(m.Proposers[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposers == nil {
				m.Proposers = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardBlockData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardBlockData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardBlockData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconBlockRoot = append(m.BeaconBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BeaconBlockRoot == nil {
				m.BeaconBlockRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentRoot = append(m.ParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentRoot == nil {
				m.ParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationBits = append(m.AggregationBits[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregationBits == nil {
				m.AggregationBits = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSizeSum", wireType)
			}
			m.BlockSizeSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSizeSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body, make([]byte, postIndex-iNdEx))
			copy(m.Body[len(m.Body)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ShardBlockData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signatures == nil {
				m.Signatures = &ShardBlockSignatures{}
			}
			if err := m.Signatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardBlockHeaderData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardBlockHeaderData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardBlockHeaderData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconBlockRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconBlockRoot = append(m.BeaconBlockRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BeaconBlockRoot == nil {
				m.BeaconBlockRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentRoot = append(m.ParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentRoot == nil {
				m.ParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationBits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationBits = append(m.AggregationBits[:0], dAtA[iNdEx:postIndex]...)
			if m.AggregationBits == nil {
				m.AggregationBits = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSizeSum", wireType)
			}
			m.BlockSizeSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSizeSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyRoot = append(m.BodyRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyRoot == nil {
				m.BodyRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ShardBlockHeaderData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signatures == nil {
				m.Signatures = &ShardBlockSignatures{}
			}
			if err := m.Signatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryAccumulator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryAccumulator = append(m.HistoryAccumulator, make([]byte, postIndex-iNdEx))
			copy(m.HistoryAccumulator[len(m.HistoryAccumulator)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHeaderData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestBlockHeaderData == nil {
				m.LatestBlockHeaderData = &ShardBlockHeaderData{}
			}
			if err := m.LatestBlockHeaderData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSizeSum", wireType)
			}
			m.BlockSizeSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSizeSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSizePrice", wireType)
			}
			m.BlockSizePrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSizePrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OlderCommitteeFees = append(m.OlderCommitteeFees, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShardBlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShardBlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OlderCommitteeFees) == 0 {
					m.OlderCommitteeFees = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShardBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OlderCommitteeFees = append(m.OlderCommitteeFees, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OlderCommitteeFees", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NewerCommitteeFees = append(m.NewerCommitteeFees, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShardBlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShardBlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NewerCommitteeFees) == 0 {
					m.NewerCommitteeFees = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShardBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NewerCommitteeFees = append(m.NewerCommitteeFees, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NewerCommitteeFees", wireType)
			}
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OlderCommitteeRewards = append(m.OlderCommitteeRewards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShardBlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShardBlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OlderCommitteeRewards) == 0 {
					m.OlderCommitteeRewards = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShardBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OlderCommitteeRewards = append(m.OlderCommitteeRewards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OlderCommitteeRewards", wireType)
			}
		case 10:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NewerCommitteeRewards = append(m.NewerCommitteeRewards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShardBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShardBlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShardBlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NewerCommitteeRewards) == 0 {
					m.NewerCommitteeRewards = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShardBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NewerCommitteeRewards = append(m.NewerCommitteeRewards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NewerCommitteeRewards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShardBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShardBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShardBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthShardBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentRoot = append(m.ParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentRoot == nil {
				m.ParentRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShardBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShardBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShardBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShardBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShardBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShardBlock
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthShardBlock
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShardBlock
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShardBlock(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthShardBlock
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShardBlock = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShardBlock   = fmt.Errorf("proto: integer overflow")
)
